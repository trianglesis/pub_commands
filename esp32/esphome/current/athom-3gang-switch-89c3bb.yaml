substitutions:
  # Default name
  name: athom-3gang-switch-1
  # Default friendly name
  friendly_name: 3Gang Switch 1
  # Allows ESP device to be automatically linked to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc
  room: ""
  # Description as appears in ESPHome & top of webserver page
  device_description: "athom 3gang switch"
  # Project Name
  project_name: "Athom Technology.3Gang Switch"
  # Projection version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "v1.1.3"
  # Restore the relay (GPO switch) upon reboot to state:
  light1_restore_mode: RESTORE_DEFAULT_OFF
  light2_restore_mode: RESTORE_DEFAULT_OFF
  light3_restore_mode: RESTORE_DEFAULT_OFF
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ".local"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: ""
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
  # Network time servers for your region, enter from lowest to highest priority. To use local servers update as per zones or countries at: https://www.ntppool.org/zone/@
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: false
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"
  on_boot:
    - priority: 600
      then:
        - select.set_index:
            id: power_mode
            index: !lambda |-
                    return id(restore_mode)-1;
        - lambda: |-
              switch(id(restore_mode))
              {
              case 1:{
                      id(light1).turn_off();
                      id(light2).turn_off();
                      id(light3).turn_off();
                      break;
                            }
              case 2:{
                      id(light1).turn_on();
                      id(light2).turn_on();
                      id(light3).turn_on();
                      break;
                            }
              default:{
                      break;
                            }
              }

esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 1min

api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

logger:
  level: INFO
  baud_rate: 115200

mdns:
  disabled: false

web_server:
  port: 80
  version: 3
  sorting_groups:
  - id: sorting_group_diagnostic
    name: "Diagnostic info"
    sorting_weight: 60
  - id: sorting_group_service
    name: "Service"
    sorting_weight: 90

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name}"
    password: !secret fall_back_wifi_password
  reboot_timeout: 900s
  fast_connect: true
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"

captive_portal:

globals:
  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "3"

select:
  - platform: template
    name: "Power On State"
    id: "power_mode"
    optimistic: true
    options:
      - Always Off
      - Always On
      - Restore Power Off State
    on_value:
      then:
        - lambda: |-
            id(restore_mode)=i+1;
    web_server:
      sorting_group_id: sorting_group_service

binary_sensor:
  - platform: status
    name: "Status"
    web_server:
      sorting_group_id: sorting_group_service

  # Touch Buttons
  - platform: gpio
    pin:
      inverted: true
      number: GPIO12
      mode:
        input: true
        pullup: true
    name: "Button1"
    id: button1
    disabled_by_default: true
    on_multi_click:
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.2s
        then:
          - light.toggle: light1
      - timing:
          - ON for at least 4s
        then:
          - button.press: Reset

  - platform: gpio
    pin:
      inverted: true
      number: GPIO3
      mode:
        input: true
        pullup: true
    name: "Button2"
    id: button2
    disabled_by_default: true
    on_click:
      max_length: 0.5s
      then:
        - light.toggle: light2

  - platform: gpio
    pin:
      inverted: true
      number: GPIO5
      mode:
        input: true
        pullup: true
    name: "Button3"
    id: button3
    disabled_by_default: true
    on_click:
      max_length: 0.5s
      then:
        - light.toggle: light3

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    update_interval: 60s
    web_server:
      sorting_group_id: sorting_group_diagnostic
    internal: true

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    web_server:
      sorting_group_id: sorting_group_diagnostic

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    web_server:
      sorting_group_id: sorting_group_diagnostic
    device_class: ""

button:
  - platform: restart
    name: "Restart"
    web_server:
      sorting_group_id: sorting_group_service

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    web_server:
      sorting_group_id: sorting_group_service

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    web_server:
      sorting_group_id: sorting_group_service

output:
  # Relays
  - platform: gpio
    pin: GPIO13
    id: relay1
  - platform: gpio
    pin: GPIO4
    id: relay2
  - platform: gpio
    pin: GPIO15
    id: relay3

  # Button LEDs (1.0 = Blue / 0.0 = Red)
  - platform: esp8266_pwm
    pin: GPIO16
    inverted: false
    id: button_led1
  - platform: esp8266_pwm
    pin: GPIO14
    inverted: false
    id: button_led2
  - platform: esp8266_pwm
    pin: GPIO1
    inverted: false
    id: button_led3

light:
  - platform: status_led
    name: "Status LED"
    disabled_by_default: true
    pin:
      number: GPIO0
      inverted: true

  # Relays
  - platform: binary
    name: "Light1"
    id: light1
    output: relay1
    restore_mode: ${light1_restore_mode}
    on_turn_on:
      - light.turn_on: led1
    on_turn_off:
      - light.turn_off: led1

  - platform: binary
    name: "Light2"
    id: light2
    output: relay2
    restore_mode: ${light2_restore_mode}
    on_turn_on:
      - light.turn_on: led2
    on_turn_off:
      - light.turn_off: led2

  - platform: binary
    name: "Light3"
    id: light3
    output: relay3
    restore_mode: ${light3_restore_mode}
    on_turn_on:
      - light.turn_on: led3
    on_turn_off:
      - light.turn_off: led3

  # Button LEDs
  - platform: monochromatic
    name: "LED1"
    disabled_by_default: true
    id: led1
    output: button_led1
    default_transition_length: 500ms
  - platform: monochromatic
    name: "LED2"
    disabled_by_default: true
    id: led2
    output: button_led2
    default_transition_length: 500ms
  - platform: monochromatic
    name: "LED3"
    disabled_by_default: true
    id: led3
    output: button_led3
    default_transition_length: 500ms

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      web_server:
        sorting_group_id: sorting_group_diagnostic
    ssid:
      name: "Connected SSID"
      web_server:
        sorting_group_id: sorting_group_diagnostic
    mac_address:
      name: "Mac Address"
      web_server:
        sorting_group_id: sorting_group_diagnostic

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    web_server:
      sorting_group_id: sorting_group_diagnostic
#    device_class: timestamp

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Uptime"
    web_server:
      sorting_group_id: sorting_group_diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min to 6 hours (or as set in substitutions)
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers:
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
